@using ContainerControlPanel.Domain.Models;
@using MudBlazor

<div class="data-grid">
	<div class="data-grid-row header">
		<div class="data-grid-cell">
			Endpoint
		</div>
		<div class="data-grid-cell">
			P50 Seconds 
			<svg xmlns="http://www.w3.org/2000/svg" height="21px" fill="currentColor" class="bi bi-dot" viewBox="0 0 16 16">
				<path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3" />
			</svg>
		</div>
		<div class="data-grid-cell">
			P90 Seconds
			<svg xmlns="http://www.w3.org/2000/svg" height="21px" fill="currentColor" class="bi bi-dot" viewBox="0 0 16 16">
				<path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3" />
			</svg>
		</div>
		<div class="data-grid-cell">
			P99 Seconds
			<svg xmlns="http://www.w3.org/2000/svg" height="21px" fill="currentColor" class="bi bi-dot" viewBox="0 0 16 16">
				<path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3" />
			</svg>
		</div>
		<div class="data-grid-cell">
			@Localizer[Locales.Resource.Examples]
		</div>
	</div>
	<div class="data-container">
		@foreach (var endpoint in Metric.Histogram.DataPoints.Where(dp => dp.Attributes.Any(a => a.Key == "http.route")))
		{
			<div @onclick="() => { currentDataPoint = endpoint; }" class="data-grid-row data">
				<div class="data-grid-cell">
					@endpoint.GetRouteName()
				</div>
				<div class="data-grid-cell">
					@endpoint.CalculateP50Seconds()
				</div>
				<div class="data-grid-cell">
					@endpoint.CalculateP90Seconds()
				</div>
				<div class="data-grid-cell">
					@endpoint.CalculateP99Seconds()
				</div>
				<div class="data-grid-cell">
					@endpoint.Count
				</div>
			</div>
		}
	</div>
</div>

<div class="chart-container">
	<div class="current-route">
		@currentDataPoint.GetRouteName()
	</div>
	<PlotlyChart @bind-Config="config" @bind-Data="data" @ref="chart" @bind-Layout="layout" />
	<div class="timestamp-select">
		<MudSelect T="int" AnchorOrigin="Origin.BottomCenter" Placeholder="@Localizer[Locales.Resource.ChooseResource]" TransformOrigin="Origin.TopCenter" @bind-Value="timestamp">
			<MudSelectItem Value="@(1)">1 @Localizer[Locales.Resource.Minute]</MudSelectItem>
			<MudSelectItem Value="@(5)">5 @Localizer[Locales.Resource.Minutes]</MudSelectItem>
			<MudSelectItem Value="@(15)">15 @Localizer[Locales.Resource.Minutes]</MudSelectItem>
			<MudSelectItem Value="@(30)">30 @Localizer[Locales.Resource.Minutes]</MudSelectItem>
			<MudSelectItem Value="@(60)">1 @Localizer[Locales.Resource.Hour]</MudSelectItem>
			<MudSelectItem Value="@(180)">3 @Localizer[Locales.Resource.Hours1]</MudSelectItem>
			<MudSelectItem Value="@(360)">6 @Localizer[Locales.Resource.Hours]</MudSelectItem>
			<MudSelectItem Value="@(720)">12 @Localizer[Locales.Resource.Hours]</MudSelectItem>
		</MudSelect>
	</div>
	@if (!bool.Parse(Configuration["Realtime"]))
	{
		<div class="refresh">
			<MudIconButton @onclick="async () => { await GetTraces(); }" Color="Color.Primary" Icon="@Icons.Material.Filled.Refresh" />
		</div>
	}
	<div class="indicator-container">
		<IndicatorChart 
			Value="@averageDuration" 
			Reference="@(0.01m)" 
			Range="minMaxDuration"
			Suffix="@("s")"
			@ref="averageDurationIndicator" />
	</div>
</div>

