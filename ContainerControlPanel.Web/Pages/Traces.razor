@page "/traces"
@page "/traces/{ResourceParameter}"
@page "/traces/{ResourceParameter}/{TimestampParameter}"
@page "/traces/{ResourceParameter}/{TimestampParameter}/{RoutesOnlyParameter}"

@using ContainerControlPanel.Domain.Models
@using MudBlazor

<div class="label">
	<h1>@Localizer[Locales.Resource.Traces]</h1>
	@if (!bool.Parse(Configuration["Realtime"]))
	{
		<div style="width: 100px;">
			<MudIconButton @onclick="async () => { await LoadTraces(); }" Color="Color.Primary" Icon="@Icons.Material.Filled.Refresh" />
		</div>
	}
</div>

@{
	List<ResourceSpan> traces = allTraces.GetTracesList(
		routesOnly: routesOnly, 
		timeOffset: int.Parse(Configuration["TimeOffset"])
	);
}

<div class="flex">
	<div class="resource-select">	
		<MudSelect T="string" Label="@Localizer[Locales.Resource.ChooseResource]" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" @bind-Value="currentResource">
			<MudSelectItem Value="@("all")">(@Localizer[Locales.Resource.All])</MudSelectItem>
			@if (allTraces.Count > 0)
			{
				@foreach (var resource in allTraces.GetResources())
				{
					<MudSelectItem Value="@(resource)">@resource</MudSelectItem>
				}
			}
		</MudSelect>
	</div>
	<div class="picker">
		<MudDatePicker Label="@Localizer[Locales.Resource.ChooseTimestamp]" @bind-Date="currentTimestamp" Clearable="true" DateFormat="dd.MM.yyyy" />
	</div>
	<div class="switch">
		<MudSwitch @bind-Value="routesOnly" Label="@Localizer[Locales.Resource.RoutesOnly]" Color="Color.Success" />
	</div>
</div>


<div class="data-grid">
	<div class="data-grid-row header">
		<div class="data-grid-cell">
			@Localizer[Locales.Resource.Timestamp]
		</div>
		<div class="data-grid-cell">
			@Localizer[Locales.Resource.Request]
		</div>
		<div class="data-grid-cell">
			@Localizer[Locales.Resource.Source]
		</div>
		<div class="data-grid-cell">
			@Localizer[Locales.Resource.Duration]
		</div>
	</div>
	@if (traces.Count < 1)
	{
		<div class="not-found">
			@Localizer[Locales.Resource.NoTracesFound].
		</div>
	}
	else 
	{
		<div class="data-container">			
			@{
				var groupedTraces = traces.GroupTraces(int.Parse(Configuration["TimeOffset"]));
			}
			@foreach (var trace in groupedTraces)
			{
				<div @onclick="() => { LoadTrace(trace.TraceId); }" class="data-grid-row data">
					<div class="data-grid-cell">
						@if (trace.Timestamp.Date == DateTime.Now.Date)
						{
							<span class="timestamp-span">
								@Localizer[Locales.Resource.Today]
							</span>
						}
						@if (trace.Timestamp.Date == DateTime.Now.AddDays(-1).Date)
						{
							<span class="timestamp-span">
								@Localizer[Locales.Resource.Yesterday]
							</span>
						}
						else if (trace.Timestamp.Date == DateTime.Now.AddDays(-2).Date)
						{
							<span class="timestamp-span">
								@Localizer[Locales.Resource._2DaysAgo]
							</span>
						}
						else if (trace.Timestamp.Date != DateTime.Now.Date)
						{
							<span class="timestamp-span">
								@trace.Timestamp.ToString("dd MMMM")
							</span>
						}
						@trace.Timestamp.ToString("HH:mm:ss")
					</div>
					<div class="data-grid-cell">
						<div class="text-overflow">@trace.Request</div>
						<div class="trace-id">
							@trace.TraceId
						</div>
					</div>
					<div class="data-grid-cell">
						@{
							var groupedSources = trace.Source
								.GroupBy(x => x)
								.Select(group => new { Name = group.Key, Count = group.Count() })
								.OrderByDescending(group => group.Count)
								.ToList();
						}
						@foreach (var group in groupedSources)
						{
							<div class="service-name-container">
								<div class="service-name-badge" style="background-color: #@(GetHexString(group.Name))">									
								</div>
								@group.Name (@group.Count)
							</div>
						}

					</div>
					<div class="data-grid-cell">
						@trace.Duration.FormatDuration(false)
					</div>
				</div>				
			}
		</div>
		<div class="footer">
			@Localizer[Locales.Resource.TotalNumberOfFoundTraces]: <b>@groupedTraces.Count</b>
		</div>
	}
</div>