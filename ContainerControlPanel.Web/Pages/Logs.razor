@page "/logs"
@page "/logs/{containerId}"
@page "/logs/{containerId}/{filterDate}"

@using ContainerControlPanel.Domain.Models
@using ContainerControlPanel.Web.Components
@using MudBlazor

<div class="label">
	<h1>Logs</h1>
	@if (!bool.Parse(configuration["Realtime"]) && container != null) 
	{
		<svg @onclick="async () => { await LoadLogs(); }" xmlns="http://www.w3.org/2000/svg" height="24px" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
			<path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
			<path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
		</svg>
	}
	<div class="switch">
		<MudSwitch @bind-Value="enableColors" Label="Enable colors"/>
	</div>	
</div>

<div class="flex">
	<MudSelect T="Container" AnchorOrigin="Origin.BottomCenter" Placeholder="Choose container..." TransformOrigin="Origin.TopCenter" @bind-Value="container">
		@foreach (var container in containers)
		{
			<MudSelectItem Value="container">@container.Names</MudSelectItem>
		}
	</MudSelect>
	<MudSelect T="string" AnchorOrigin="Origin.BottomCenter" Placeholder="Choose timestamp..." TransformOrigin="Origin.TopCenter" @bind-Value="timestamp" Clearable="true">
		<MudSelectItem Value="@("15m")">15 minutes</MudSelectItem>
		<MudSelectItem Value="@("30m")">30 minutes</MudSelectItem>
		<MudSelectItem Value="@("60m")">1 hour</MudSelectItem>
		<MudSelectItem Value="@("360m")">6 hours</MudSelectItem>
		<MudSelectItem Value="@("720m")">12 hours</MudSelectItem>
		<MudSelectItem Value="@("1440m")">24 hours</MudSelectItem>
		<MudSelectItem Value="@("10080m")">7 days</MudSelectItem>
	</MudSelect>
	<div class="date-picker">
		<MudDatePicker @bind-Date="filterDate" Clearable="true" DateFormat="dd.MM.yyyy"/>
	</div>
	<div class="time-flex">
		<MudTimePicker Editable="true" @bind-Time="timeFrom"/>
		<MudTimePicker Editable="true" @bind-Time="timeTo"/>
	</div>
</div>


@if (logs.Length > 0) 
{
	<div class="logs-flex">
		<div class="logs-container">	
			@if (enableColors) 
			{
				<ColorfulLogs Logs="@logs"/>
			}
			else 
			{
				@logs
			}		
			<div id="logs-bottom"></div>
		</div>
		<svg @onclick="@(async () => { await scrollHandler.ScrollToElementByIdAsync("logs-bottom"); })" class="scroll-down" xmlns="http://www.w3.org/2000/svg" height="32px" fill="currentColor" viewBox="0 0 16 16">
			<path fill-rule="evenodd" d="M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4" />
		</svg>
	</div>
}
else if (container != null) 
{
	<div class="not-found">
		There are no logs for the selected parameters.
	</div>
}
